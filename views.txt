from django.shortcuts import render
from django.http import HttpResponse
from django.template import loader


import random
import string
# import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import warnings
warnings.filterwarnings('ignore')
import nltk
from nltk.stem import WordNetLemmatizer
nltk.download('popular', quiet=True)  # for downloading packages
nltk.download('punkt')  # first-time use only
nltk.download('wordnet')  # first-time use only





def index(request):
    template = loader.get_template('app.html')
    con = {}

    if request.method == 'POST':

        user_input = request.POST.get('input')
        chat = request.POST.get('content')
        print(user_input)






        # Reading in the corpus
        # what if I want to read in different files depending on user`s topic category?
        with open('app/chats.txt', 'r', encoding='utf8', errors='ignore') as fin:
            raw = fin.read().lower()

        # Tokenisation
        sent_tokens = nltk.sent_tokenize(raw)  # converts to list of sentences
        word_tokens = nltk.word_tokenize(raw)  # converts to list of words

        # lemmer
        # Preprocessing
        lemmer = WordNetLemmatizer()

        def LemTokens(tokens):
            return [lemmer.lemmatize(token) for token in tokens]

        remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)

        def LemNormalize(text):
            return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

        # Vorstellung: suchen sie nach Infos zu Bereich A, B oder C (AreaInput). Bitte geben Sie Bereich A ein, falls Sie zu A Fragen haben
        # AreaInput entscheidet dann darüber, welche txt. geladen wird. Diese kann dann durchsucht werden.
        # Keyword Matching
       # GREETING_INPUTS = ("hello", "hi", "how is it going", "greetings", "sup", "hey", "what's up,",)
       # GREETING_RESPONSES = ["Hi there, my name is KPI Bot. I am here to answer your manufacturing KPI questions.",
                    #          "Hello, nice to meet you. I am FAQ Bot and I am happy to serve you: what KPI related question do you have?"]

       # def greeting(sentence):
        #    """If user's input is a greeting, return a greeting response"""
        #    for word in sentence.split():
          #      if word.lower() in GREETING_INPUTS:
            #        return random.choice(GREETING_RESPONSES)

            #        # Keyword Matching
            # Name_INPUTS = ("wie heisst du",)
            # Name_RESPONSES = ["Ich heiße BiBot und bin hier um Ihnen bezüglich Fragen rund um BI weiterzuhelfen"]

            # def greeting2(sentence):
          #  """If user's input is a greeting, return a greeting response"""

        #    for word in sentence.split():
        #        if word.lower() in Name_INPUTS:
        #            return random.choice(Name_RESPONSES)

        # Generating response
        def response(user_response):
            robo_response = ''
            sent_tokens.append(user_response)
            TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
            tfidf = TfidfVec.fit_transform(sent_tokens)
            vals = cosine_similarity(tfidf[-1], tfidf)
            idx = vals.argsort()[0][-2]
            flat = vals.flatten()
            flat.sort()
            req_tfidf = flat[-2]
            if (req_tfidf == 0):
                robo_response = robo_response + " > I am sorry I didn`t catched that, but I am constantly learning.. Could you please try to say it in other words?"
                with open('app/userinputs.txt', 'a') as f:
                    f.write(' > '+user_response+'.'+'\n')
                return robo_response
            else:
                robo_response = robo_response + sent_tokens[idx]
                return robo_response



        user_response = user_input.lower()
        res = response(user_response)
        print("Q Bot: ", end="")
        print(res)
        res = res.split(">", 1)
        #print(res[1])
        resp = res[1]
        con = {'resp': resp, 'input': user_response}
        sent_tokens.remove(user_response)
        return HttpResponse(template.render(con, request))



    return HttpResponse(template.render(con))
